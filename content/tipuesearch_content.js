var tipuesearch = {"pages": [{'title': 'About', 'text': '我的學號:40923212 \n 網站倉儲: https://github.com/40923212/cd2022 \n 網頁連結: https://40923212.github.io/cd2022/content/index.html \n 課程投影片: https://40923212.github.io/cd2022/reveal/index.html \n 課程網誌: https://40923212.github.io/cd2022/blog/index.html \n', 'tags': '', 'url': 'About.html'}, {'title': 'run', 'text': '\n \n \n  for ggame  \n \n \n \n \n \n \n \n \n  Cango 程式庫  \n \n \n \n \n \n \n \n \n  for Konva 程式庫  \n \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n grp2a_2022 grp_2022 \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n  這裡的畫布 id 為 brython_div  \n \n  graphics-column is for ggame  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  add 1 to 100 開始  \n \n \n', 'tags': '', 'url': 'run.html'}, {'title': 'Assignments', 'text': '', 'tags': '', 'url': 'Assignments.html'}, {'title': 'W2', 'text': '----------- 個人 -----------/------------ 小組 ----------- \n   倉儲   網站   倉儲 網站 \n \n 第1組: \n \n 40923201  --   40923201  /  40923201  --   40923201 \n 40923205  --   40923205  /   40923205  --   40923205 40923208  --   40923208  /   40923208  --   40923208 40923210  --   40923210  /  40923210  --   40923210 40923217  --   40923217  /  40923217  --   40923217 40923230  --   40923230  /   40923230  --   40923230 40923231  --   40923231  /   40923231  --   40923231 40923235  --   40923235  /   40923235  --   40923235 \n \n ------------------------------------------------------ \n \n 第2組: \n 40823215  --   40823215  /   40823215  --   40823215 40923203  --  40923203  /   40923203   --   40923203 40923204  --   40923204   /   40923204   --   40923204 40923207  --   40923207   /   40923207  --  40923207 40923209  --   40923209   /   40923209   --   40923209 40923213  --   40923213   /   40923213   --   40923213 40923220  --   40923220   /   40923220  --  40923220 40923240  --   40923240   /   40923240   --   40923240 \n \n ------------------------------------------------------- \n \n 第3組: \n 40923226  --  40923226   /   40923226   --   40923226 40923242   --   40923242   /   40923242   --   40923242 40923245   --   40923245   /   40923245   --   40923245 40923247   --   40923247   /   40923247   --   40923247 40923249   --   40923249   /   40923249   --   40923249 40923252   --   40923252   /   40923252   --   40923252 40923206   --   40923206   /   40923206   --   40923206 40923224   --   40923224   /   40923224   --   40923224 \n \n ------------------------------------------------------ \n \n 第4組: \n 40623143  --   40623143   /   40623143   --   40623143 40723146  --   40723146   /   40723146   --   40723146 40923211  --   40923211   /   40923211   --   40923211 40923218  --   40923218   /   40923218   --   40923218 40923221  --   40923221   /   40923221   --   40923221 40923223  --   40923223  /   40923223   --   40923223 40923227  --   40923227  /   40923227   --   40923227 40923238  --   40923238  /   40923238   --   40923238 40923243  --   40923243  /   40923243   --   40923243 \n \n \n ------------------------------------------------------ \n \n \n 第5組: \n 40923212  --   40923212  /   40923212  --   40923212 40923229  --   40923229  /   40923229  --   40923229 40923233  --   40923233  /   40923233  --   40923233 40923234  --   40923234  /   40923234  --   40923234 40923237  --   40923237  /   40923237  --   40923237 40923251  --   40923251  /   40923251  --   40923251 40923253  --   40923253  /   40923253  --   40923253 40971220  --   40971220  /   40971220  --   40971220 \n \n \n ------------------------------------------------------ \n \n \n 第6組: \n 40723217  --   40723217  /   40723217  --   40723217 40923219  --   40923219  /   40923219  --   40923219 40923225  --   40923225  /   40923225  --   40923225 40923232  --   40923232  /   40923232  --   40923232 40923236  --   40923236  /   40923236  --   40923236 40923241  --   40923241  /   40923241  --   40923241 40923246  --   40923246  /   40923246  --   40923246 40923250  --   40923250  /   40923250  --   40923250 \n \n \n ------------------------------------------------------ \n \n \n 第7組: \n 40723134  --   40723134  /   40723134  --   40723134 40723136  --   40723136  /   40723136  --   40723136 40732331  --   40732331  /   40732331  --   40732331 40923214  --   40923214  /   40923214  --   40923214 40923228  --   40923228  /   40923228  --   40923228 40923248  --   40923248  /   40923248  --   40923248 40923216  --   40923216  /   40923216  --   40923216 \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '影片1 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 影片2 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 影片3 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 影片4 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n 影片5 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W6', 'text': '在 cmd 輸入 leo 叫出leo edit \n \n 在 leo edit  開啟 cd2022> config> pelican \n \n 修改pelican裡原有的資料，改成自己的 學號 和 標題 \n \n 將pelican設定>遠端>@edit publishconf.py> SITEURL 改成自己的倉儲 \n \n 將@Path markdown>@path pages>@edit pages_1.md裡面的四個連結都改成自己的 \n \n 將@Path markdown>cd2022>2022spring CD課程>@edit日期.md編輯成自己的資料 \n \n 修改好後對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 將網址複製 \n \n 到cd2022>markdown裡面加個 images 的資料夾 \n \n 於cmd輸入 \n cd tmp \n cd cd2022\xa0 \n pelican markdown -o blog -s local_publishconf.py \n \n 於cmd輸入 \n acp "標題" \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '組員分配不同的繪圖軟體分別是 Solvespace、NX12、NX1980、NX2008 與 Onshape 繪製出Pick and Place demo範例所需的零組件 將零件組裝好後 利用Coppeliasim模擬機械運轉 目前零件畫好也組裝完畢 研究程式碼讓機械手臂可以正常運轉。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': 'uarm各零件圖 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n 組合圖如下 \n \n \n \n 把 uarm 組合件轉成 STL 後轉入 CoppeliaSim 以 GUI Slider 方式控制前三軸作動 \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'w10_block_ui', 'text': '\n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_block_ui.html'}, {'title': 'w10_nx_integ', 'text': '\n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_nx_integ.html'}, {'title': 'w10_ssh', 'text': '\n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_ssh.html'}, {'title': 'W11', 'text': 'First\xa0 \n 把協同所做的倉儲內容上傳至小組倉儲， 上傳時務必要先將 圖片和wink 改成遠端網址 ，將source code的內容複製到小白窗存成文字檔 記得加上.txt， 就可以推到小組網頁，操作方法如下。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n second \n 每個組員使用的繪圖軟體都不同，為了要將零件整合，所以組員們把檔案存成 STL檔， 就可以匯入其他的繪圖軟體， 也可以匯入CoppeliaSam裡面進行模擬操作， 先將MTB零件組合檔存成STL導入CoppeliaSam，再將零件分解並連接起來，存成 CoppeliaSim\xa0XLM的simple format檔。 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': 'UARM手臂所需零件共155個， 若不計重複使用之零件總數為58個。 \n \n \n M2X4 螺絲 \n M3X4 内六角 圓頭 螺絲 \n M3X5 内六角 圓頭 螺絲 \n M3X5 平頭 螺絲 \n M3X5 沉頭 螺絲 \n M3X5 扁平 頭鐵鍍鎳 螺絲 \n M3X5 \xa0 圓頭 黑色十字 螺絲 \n M3X6 内六角圓頭 螺絲 \n M3X15 雙通 螺絲 \n M4X5 顶 螺絲 \n M4X6 沉 頭 螺絲 \n M4X7 平 頭 螺絲 \n M4X10 平 頭 螺絲 \n M4X15 平頭 螺絲 \n MF84 \n 2mm導光柱 \n 2mm導熱硅胶片 \n 3Dprint轉接板 \n 5-13-4軸承 \n 6X2.5 磁鐵 \n 8.3X1.5 防滑墊 \n 前端通用件 \n 前端關節 \n 7mm 支撐柱 \n 3mm 鋁支撐柱 \n 三角形連桿軸承壓緊件 \n 三角形連桿 \n 絞鍊 \n 主臂關節2 \n 主臂關節1 \n 電機軸承支撐座_左側 \n 電機軸承支撐座_右側 \n 右側曲柄 \n 輸出軸 \n 右側連桿 \n 左側連桿 \n 4mm 鋁支撐柱 \n 減速箱上殼 \n 減速箱下殼 \n L型連接件 \n 軸承支撐軸 \n 軸承支撐圈 \n 底座上蓋 \n 底座中間部分 \n 底座蓋 \n 磁编碼器PCB \n 42進步電機 \n 塑料蓋板 \n 使用py檔案去run，則可以得知UARM手臂: \n 30%零件為steel製，其餘為 A l uminum製，總重量 約 2,2205kg \n 全部零件為Aluminum 製，總重量 約1,412kg \n 全部零件為steel製， 總重量 約4,1062kg \n', 'tags': '', 'url': 'W12.html'}, {'title': 'UARM Part file', 'text': 'My approach is to transfer the NX file after drawing with SOLIDWORKS. \n UARM Part file \n', 'tags': '', 'url': 'UARM Part file.html'}, {'title': 'W13', 'text': '這週下載了 CoppeliaSimEdu也就是CoppeliaSim 3.0版 \n \n MTB機構 \n 用NX12繪製Pick and Place demo範例所需之零組件，零件組裝後，利用Coppeliasim模擬機械運轉。 \n \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '用Coppeliasim 模擬mtb運轉，將方塊吸起來再放下來。 \n \n 使用老師的程式進行修改。 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': '\n \n joint1， L為順時針，K 為逆時針 \n joint2， J 為順時針， H 為逆時針 \n joint3， G 為順時針， F 為逆時針 \n function sysCall_init()\n    axis1=sim.getObject(\'./joint1\')\n    axis2=sim.getObject(\'./joint2\')\n    axis3=sim.getObject(\'./joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    rotation1 = 0\n    rotation2 = 0\n    rotation3 = 0\n    deg = math.pi/180.\n    enableSuctionPad(true)\nend\nfunction enableSuctionPad(enable)\n    -- use the suctionPad object to pass the variable activity value\n    -- if enable = true, the activity = \'on\'\n    if enable then\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 1*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n    message, auxiliaryData=sim.getSimulatorMessage()\n    while message ~= -1 do\n        key=auxiliaryData[1]\n        sim.addStatusbarMessage(\'user press key:\'..key)\n        if (message==sim.message_keypress) then\n           --if (auxiliaryData[1]==112) then --p activate the suction pad\n            if (auxiliaryData[1]==string.byte(\'p\')) then\n                -- if key p pressed activate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                enableSuctionPad(true)\n            end -- if p\n            if (auxiliaryData[1]==string.byte(\'q\')) then --q deactivate the suction pad\n                -- if key q pressed deactivate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                enableSuctionPad(false)\n            end -- if q\n            if (auxiliaryData[1]==string.byte(\'k\')) then --k right turn in degree\n                -- if key k pressed axis1 angle adds 2 degrees\n                 rotation1 = rotation1 + 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if k\n            if (auxiliaryData[1]==string.byte(\'l\')) then --l left turn in degree\n                -- if key l pressed axis1 angle substract 2 degrees\n                 rotation1 = rotation1 - 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if l\n-- for joint2 start ##########################################################\n            if (auxiliaryData[1]== string.byte("h")) then --r right turn in degree\n                -- if key r pressed axis1 angle adds 2 degrees\n                 rotation2 = rotation2 + 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if k\n            if (auxiliaryData[1]==string.byte("j")) then\n                -- if key j pressed axis2 angle substract 2 degrees\n                 rotation2 = rotation2 - 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if j\n-- for joint2 end ##########################################################\n-- for joint3 start ##########################################################\n            if (auxiliaryData[1]== string.byte("f")) then\n                -- if key f pressed axis3 angle adds 2 degrees\n                 rotation3 = rotation3 + 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if f\n            if (auxiliaryData[1]==string.byte("g")) then\n                -- if key g pressed axis3 angle substract 2 degrees\n                 rotation3 = rotation3 - 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if g\n-- for joint3 end ##########################################################\n            if (auxiliaryData[1]==99) then --c coordinate of block\n                blockPosition = sim.getObjectPosition(block, BaseFrame)\n                sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n            end --if c\n       end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n    end -- while\nend -- function\n \nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n \n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n \n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n \n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n \n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n     \n]]--\nend\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n-- See the user manual or the available code snippets for additional callback functions and details\n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': 'tkinter GUI \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n OpenCV \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'Online Exam', 'text': '\n 1.已知左側綠色底座的 uArm 機械手臂, 其基座座標原點位於絕對座標 (1.0, 0.25, 0), 啟動模擬後 green_suctionpad_frame 座標原點則位於 (0.22859, 0.26047, 0.36576), 請列出運算式說明, 啟動模擬後 joint1, joint2 與 joint3 分別以逆時針旋轉 5 度後, 求 green_suctionpad_frame 的絕對座標值. \n \n 使用運算試算出來green_suctionpad_frame 的joint1, joint2 與 joint3分別以逆時針旋轉 5 度後的座標為 (0.2736,0.1322,0.3869) \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為 (0.2, 0.4, 0.1), 請列出運算式說明左側 uarm 機械手臂的 joint1, joint2 與 joint3 該如何旋轉才能讓 end effector 的吸盤末端中心點移動至紅色方塊頂端中心? \n joint1:I為順時針、U為逆時針。 \n joint2:Y為順時針、T為逆時針。 \n joint3:R為順時針、E為逆時針。 \n 先讓joint1順時針轉10度，再讓joint2順時針轉27度，之後joint3順時針轉34度即可接近紅色方塊頂端中心。 \n', 'tags': '', 'url': 'Online Exam.html'}, {'title': 'notes', 'text': '', 'tags': '', 'url': 'notes.html'}, {'title': 'wink', 'text': '貼上老師的原始碼 \n <script> var winkVideoData = { dataVersion: 1, frameRate: 20, buttonFrameLength: 10, buttonFrameOffset: 5, frameStops: { }, }; // ]]></script> \n 接上自己wink video的原始碼 11~26行 \n \n 修改加上 \n <video width="960" height="540" \xa0(影片的尺寸) \n data-dirname="./../cmsimde/static"  data-varname="winkVideoData" video=""> \n <source src=" /downloads/ wink 4.mp4" \n \n 影片記得丟到 downloads \n', 'tags': '', 'url': 'wink.html'}, {'title': '反pullrequest', 'text': '到 自己學號下的 小組倉儲點選pullrequest \n \n 點選new\xa0 pullrequest \n \n 將網址上的學號前後對調，如下圖: \n \n \n 學號對調後就點選create pullrequest，之後的方法跟原本的 pullrequest，完整作法如下影片: \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '反pullrequest.html'}, {'title': 'LEO\xa0edit', 'text': '在 cmd 輸入 leo 叫出leo edit \n \n 在 leo edit  開啟 cd2022> config> pelican \n \n 修改pelican裡原有的資料，改成自己的 學號 和 標題 \n \n 將pelican設定>遠端>@edit publishconf.py> SITEURL 改成自己的倉儲 \n \n 將@Path markdown>@path pages>@edit pages_1.md裡面的四個連結都改成自己的 \n \n 將@Path markdown>cd2022>2022spring CD課程>@edit日期.md編輯成自己的資料 \n \n 修改好後對 local-blog 按下 右鍵 ，在按下 Goto Script \n \n 將網址複製 \n \n 到cd2022>markdown裡面加個 images 的資料夾 \n \n 於cmd輸入 \n cd tmp \n cd cd2022\xa0 \n pelican markdown -o blog -s local_publishconf.py \n \n 於cmd輸入 \n acp "標題" \n \n', 'tags': '', 'url': 'LEO\xa0edit.html'}, {'title': 'midterm', 'text': 'uarm各零件圖 \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n 組合圖 \n \n \n \n 把 uarm 組合件轉成 STL 後轉入 CoppeliaSim 以 GUI Slider 方式控制前三軸作動', 'tags': '', 'url': 'midterm.html'}]};